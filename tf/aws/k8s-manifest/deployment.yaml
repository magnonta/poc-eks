apiVersion: apps/v1
kind: Deployment
metadata:
  name: docplanner-go
  namespace: poc
  labels:
    app: docplanner-go
spec:
  replicas: 1
  selector:
    matchLabels:
      app: docplanner-go
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      labels:
        app: docplanner-go
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 3000
        fsGroup: 2000
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - docplanner-go
            topologyKey: "kubernetes.io/hostname"
      imagePullSecrets:
      - name: ghcr-secret
      containers:
      - name: go-app
        image: ghcr.io/magnonta/golang-poc
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
        startupProbe:
          httpGet:
            path: /
            port: 8080
          failureThreshold: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "500m"
            memory: "256Mi"
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: docplanner-go-pdb
  namespace: poc
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: docplanner-go
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: docplanner-php
  namespace: poc
  labels:
    app: docplanner-php
spec:
  replicas: 1
  selector:
    matchLabels:
      app: docplanner-php
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      labels:
        app: docplanner-php
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - docplanner-php
            topologyKey: "kubernetes.io/hostname"
      imagePullSecrets:
      - name: ghcr-secret
      containers:
      - name: php-app
        image: ghcr.io/magnonta/php-poc:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
        startupProbe:
          httpGet:
            path: /
            port: 80
          failureThreshold: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "500m"
            memory: "256Mi"
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: docplanner-php-pdb
  namespace: poc
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: docplanner-php
---
apiVersion: v1
kind: Service
metadata:
  name: docplanner-service-go
  namespace: poc
  labels: 
    app: docplanner-go
spec:
  selector:
    app: docplanner-go
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
      name: go-app
---
apiVersion: v1
kind: Service
metadata:
  name: docplanner-service-php
  namespace: poc
spec:
  selector:
    app: docplanner-php
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
      name: php-app
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: docplanner-ingress
  namespace: poc
  annotations:
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
  ingressClassName: nginx  # Substitui a anotação kubernetes.io/ingress.class
  rules:
    - http:
        paths:
          - path: /api/v1/
            pathType: Prefix
            backend:
              service:
                name: docplanner-service-go
                port:
                  number: 80
          - path: /api/v2/
            pathType: Prefix
            backend:
              service:
                name: docplanner-service-php
                port:
                  number: 80
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: docplanner-go-hpa
  namespace: poc
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: docplanner-go
  minReplicas: 1
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 10
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 10

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: docplanner-php-hpa
  namespace: poc
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: docplanner-php
  minReplicas: 1
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 10
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 10
